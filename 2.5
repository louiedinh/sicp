#lang racket

;; utility functions

(define (square x) (* x x))

;; Operation, type -> procedure
;; Dispatch table.
;;
(define *op-table* (make-hash))

(define (put op type proc)
  (hash-set! *op-table* (list op type) proc))

(define (get op type)
  (hash-ref *op-table* (list op type) #f))

(define *coercion-table* (make-hash))

(define (put-coercion src-type dest-type conversion-function)
  (hash-set! *coercion-table* (list src-type dest-type) conversion-function))

(define (get-coercion src-type dest-type)
  (hash-ref *coercion-table* (list src-type dest-type) '#f))

;; packages

(define (attach-tag tag datum)
  (cons tag datum))

(define (install-scheme-number-package)
  (define (tag x) x)
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag - x y)))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (/ x y)))
  (put 'make 'scheme-number
       (lambda (x) x))
  (put 'equ? '(scheme-number scheme-number)
       (lambda (x y) (= x y)))
  (put '=zero? '(scheme-number)
       (lambda (x) (= x 0)))
  (put 'expo '(scheme-number scheme-number )
       (lambda (x y) (tag (expt x y))))
  (put 'raise '(scheme-number) (lambda (x)
                               (make-rat x 1)))
  'done)

(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))

(define (install-rational-package)
  ;; internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (zero?-rat x)
    (= (numer x) 0))
  ;; interface to rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'equ? '(rational rational)
       (lambda (x y) (= (* (numer x) (denom y))
                        (* (numer y) (denom x)))))
  (put '=zero? '(rational) 
       (lambda (x) (zero?-rat x)))
  (put 'raise '(rational) (lambda (x) (make-complex-from-real-imag (/ (numer x) (denom x)) 0)))
  (put 'project '(rational) (lambda (x) (make-scheme-number (floor (/ (numer x) (denom x))))))
  'done)

(define (make-rational n d)
  ((get 'make 'rational) n d))

;; Complex numbers
(define (install-rectangular-package)
  ;; internal procedures
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (sqrt (+ (square (real-part z))
             (square (imag-part z)))))
  (define (angle z)
    (atan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a) 
    (cons (* r (cos a)) (* r (sin a))))
  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular 
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular 
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (install-polar-package)
  ;; internal procedures
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a) (cons r a))
  (define (real-part z)
    (* (magnitude z) (cos (angle z))))
  (define (imag-part z)
    (* (magnitude z) (sin (angle z))))
  (define (make-from-real-imag x y) 
    (cons (sqrt (+ (square x) (square y)))
          (atan y x)))
  ;; interface to the rest of the system
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle '(polar) angle)
  (put 'make-from-real-imag 'polar
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'polar 
       (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)


(define (install-complex-package)
  ;; imported procedures from rectangular and polar packages
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  ;; internal procedures
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angle z1) (angle z2))))
  (define (zero?-complex z)
    (and (= (real-part z) 0)
         (= (imag-part z) 0)))
  ;; interface to rest of the system
  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex)
       (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub '(complex complex)
       (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul '(complex complex)
       (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div '(complex complex)
       (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'make-from-real-imag 'complex
       (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'complex
       (lambda (r a) (tag (make-from-mag-ang r a))))
  (put 'equ? '(complex complex)
       (lambda (x y) (and (= (real-part x) (real-part y))
                          (= (imag-part x) (imag-part y)))))
  (put '=zero? '(complex)
       (lambda (x) (zero?-complex x)))
  (put 'raise '(complex) (lambda (x) #f))
  (put 'project '(complex) (lambda (x) (make-rat (real-part x) 1)))
  'done)


(define (type-tag tagged-datum)
  (if (number? tagged-datum)
      'scheme-number
      (car tagged-datum)))

(define (contents tagged-datum)
  (if (number? tagged-datum)
      tagged-datum
      (cdr tagged-datum)))

;; Type coercions

(define (scheme-number->complex n)
  (make-complex-from-real-imag (contents n) 0))

(put-coercion 'scheme-number 'complex scheme-number->complex)

(define (scheme-number->scheme-number n) n)
(define (complex->complex z) z)
(put-coercion 'scheme-number 'scheme-number
              scheme-number->scheme-number)
(put-coercion 'complex 'complex complex->complex)

;; External functions

(define (apply-generic-1 op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (arg1 (car args))
                    (arg2 (cadr args)))
                (if (not (eq? type1 type2))
                    (let ((t1->t2 (get-coercion type1 type2))
                          (t2->t1 (get-coercion type2 type1)))
                      (cond (t1->t2 (apply-generic op (t1->t2 arg1) arg2))
                            (t2->t1 (apply-generic op arg1 (t2->t1 arg2)))
                            (else (error "No method for these types" (list op type-tags)))))
                    (error "No method for these types" (list op type-tags))))
              (error "No method for these types" (list op type-tags)))))))

(define (apply-generic-2 op . args)
  (define (_apply-generic reference-types op . args)
    (let ((type-tags (map type-tag args)))
      (let ((proc (get op type-tags)))
        (if proc
            (apply proc args)
            (if (empty? reference-types)
                (error "Couldn't apply op to args" (list op args))
                (let ((coerced-args (coerce-all (car reference-types) args)))
                  (if coerced-args ;coercion successful
                      (apply _apply-generic (append (list (cdr reference-types)) (list op) coerced-args))
                      (apply _apply-generic (append (list (cdr reference-types)) (list op) args)))))))))
  (define (coerce-all reference-type args)
    (define (_coerce-all reference-type args coerced-args)
      (if (empty? args)
          coerced-args
          (let ((type-of-1 (type-tag (car args))))
            (let ((coerce (get-coercion type-of-1 reference-type)))
              (if coerce
                  (_coerce-all reference-type (cdr args) (cons (coerce (car args)) coerced-args))
                  #f)))))
    (_coerce-all reference-type args '()))
  (apply _apply-generic (append (list (map type-tag args)) (list op) args)))


(define (apply-generic-3 op . args)
  (define (can-coerce-to-type? types target-type)
    (andmap (lambda (type) (or (eq? type target-type)
                               (get-coercion type target-type)))
            types))
  (define (find-coercion-target types)
    (ormap (lambda (target-type)
             (if (can-coerce-to-type? types target-type)
                 target-type
                 #f))
           types))
  (define (coerce-all args target-type)
    (map (lambda (arg)
           (let ((arg-type (type-tag arg)))
             (if (equal? arg-type target-type)
                 arg
                 ((get-coercion arg-type target-type) arg))))
         args))
  (define (no-method type-tags)
    (error "No method for these types" (list op type-tags)))
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (let ((target-type (find-coercion-target type-tags)))
            (if target-type
                (apply apply-generic
                       (append (list op)
                               (coerce-all args target-type)))
                (no-method type-tags)))))))

(define (apply-generic-raise op . args)
  (define (raise-to base-type datum)
    (let ((type (type-tag datum)))
    (if (eq? base-type (type-tag datum))
        datum
        (let ((parent-typed-datum (raise datum)))
          (if parent-typed-datum
              (raise-to base-type parent-typed-datum)
              #f)))))
  (define (find-base-type data)
    (let ((type-tags (map type-tag data)))
      (ormap (lambda (base-type-test)
               (if (raise-all base-type-test data)
                   base-type-test
                   #f))
              type-tags)))
  (define (raise-all base-type data)
    (if (andmap (lambda (datum) (raise-to base-type datum))
                data)
        (map (lambda (datum)
               (raise-to base-type datum))
             data)
        #f))
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc args)
          (let ((base-type (find-base-type args)))
            (if base-type
                (let ((proc (get op (map type-tag (raise-all base-type args)))))
                  (if proc
                      (apply apply-generic-raise (append (list op) (raise-all base-type args)))
                      (error "No operation found for" (list op (raise-all base-type args)))))
                (error "No base type found for" args)))))))

(define (apply-generic op . args)
  (define (no-method type-tags)
    (error "No method for these types"
      (list op type-tags)))
  (define (raise-into s t)
    "Tries to raise s into the type of t. On success,
    returns the raised s. Otherwise, returns #f"
    (let ((s-type (type-tag s))
          (t-type (type-tag t)))
      (cond
        ((equal? s-type t-type) s)
        ((get 'raise (list s-type))
          (raise-into ((get 'raise (list s-type)) (contents s)) t))
        (t #f))))
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
            (let ((o1 (car args))
                  (o2 (cadr args)))
              (cond
                ((raise-into o1 o2)
                  (apply-generic op (raise-into o1 o2) o2))
                ((raise-into o2 o1)
                  (apply-generic op o2 (raise-into o2 o1)))
                (else (no-method type-tags))))
            (no-method type-tags))))))


                 
    
(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))

(define (make-rat numer denom)
  ((get 'make 'rational) numer denom))

(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))

(define (equ? a b) 
  (if (eq? (type-tag a) (type-tag b))
      (apply-generic 'equ? a b)
      #f))

(define (=zero? x)
  (apply-generic '=zero? x))

(define (magnitude z)
  (apply-generic 'magnitude z))

(define (real-part z)
  (apply-generic 'real-part z))

(define (imag-part z)
  (apply-generic 'imag-part z))

(define (expo x y) (apply-generic 'expo x y))

(define (raise x) (apply-generic 'raise x))

(define (project datum)
  (apply-generic 'project datum))

(define (drop datum)
  (let ((project-proc (get 'project (list (type-tag  datum)))))
    (if project-proc
        (let ((dropped (project-proc (contents datum))))
          (if (equ? datum (raise dropped))
              (drop dropped)
              datum))
        datum)))
  

;; Install the packages

(install-scheme-number-package)
(install-complex-package)
(install-rectangular-package)
(install-polar-package)
(install-rational-package)
