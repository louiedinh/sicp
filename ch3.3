#lang racket

; Queue code from 3.2
(define (make-queue) (mcons '() '()))
(define (front-queue q) (mcar (mcar q)))
(define (empty-queue? q) (empty? (mcar q)))

(define (insert-queue! q item)
  (let ((new-pair (mlist item)))
    (if (empty-queue? q)
        (begin (set-mcar! q new-pair)
               (set-mcdr! q new-pair)
               q)
        (let ((prev-last-pair (mcdr q)))
          (begin (set-mcdr! prev-last-pair new-pair)
                 (set-mcdr! q new-pair)
                 q)))))

(define (delete-queue! q)
  (if (empty-queue? q)
      q
      (if (eq? (mcar q) (mcdr q)) ;We have reached the end
          (begin (set-mcar! q '())
                 (set-mcdr! q '())
                 q)
          (begin (set-mcar! q (mcdr (mcar q)))
                 q))))
;; Helpers

(define (mcaar pair)
  (mcar (mcar pair)))

(define (mlist . args)
  (if (empty? args)
      '()
      (mcons (car args) (apply mlist (cdr args)))))

;; Table methods

;; Given a key, give back the value
(define (lookup key table)
  (let ((record (assoc key (mcdr table))))
    (if record
        (mcdr record)
        #f)))

;; Given a key, give back the record
(define (assoc key records)
  (cond ((empty? records) #f)
        ((eq? key (mcaar records)) (mcar records))
        (else (assoc key (mcdr records)))))

;; Put in a new entry
(define (insert! key value table)
  (let ((record (assoc key (mcdr table))))
    (if record
        (set-mcdr! record value)
        (set-mcdr! table
                  (mcons (mcons key value) (mcdr table))))
    'ok))

(define (make-table)
  (mlist '*table*))

(define (lookup-2d key-1 key-2 table)
  (let ((subtable (assoc key-1 (cdr table))))
    (if subtable
         (let ((record (assoc key-2 (cdr subtable))))
           (if record
               (cdr record)
               #f))
         #f)))

(define (insert-2d! key-1 key-2 value table)
  (let ((subtable (assoc key-1 (cdr table))))
    (if subtable
        (let ((record (assoc key-2 (cdr subtable))))
          (if record
              (set-mcdr! record value)
              (set-mcdr! subtable
                        (cons (cons key-2 value)
                              (cdr subtable)))))
        (set-mcdr! table
                  (cons (list key-1
                              (cons key-2 value))
                        (cdr table))))))

(define (make-table-local same-key?)
  (let ((local-table (mlist '*table*)))
    (define (assoc key records)
      (cond ((empty? records) #f)
            ((same-key? key (mcaar records)) (mcar records))
            (else (assoc key (mcdr records)))))
    (define (lookup key-1 key-2)
      (let ((subtable (assoc key-1 (mcdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (mcdr subtable))))
              (if record
                  (mcdr record)
                  #f))
            #f)))
    (define (insert! key-1 key-2 value)
      (let ((subtable (assoc key-1 (mcdr local-table))))
        (if subtable
            (let ((record (assoc key-2 (mcdr subtable))))
              (if record
                  (set-mcdr! record value)
                  (set-mcdr! subtable
                            (mcons (mcons key-2 value)
                                  (mcdr subtable)))))
            (set-mcdr! local-table
                       (mcons (mlist key-1 
                                    (mcons key-2 value))
                             (mcdr local-table))))))
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            ((eq? m 'table) local-table)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

;; Binary tree table

(define (make-node key value left right)
  (mlist key value left right))

(define (node-key node)
  (mcar node))
(define (node-value node)
  (mcar (mcdr node)))
(define (node-left node)
  (mcar (mcdr (mcdr node))))
(define (node-right node)
  (mcar (mcdr (mcdr (mcdr node)))))
(define (node-set! left-or-right node value)
  (cond ((eq? left-or-right 'left) (set-mcar! (mcdr (mcdr node)) value))
        ((eq? left-or-right 'right) (set-mcar! (mcdr (mcdr (mcdr node))) value))
        ((eq? left-or-right 'value) (set-mcar! (mcdr node)) value)))


(define (make-binary-tree-table)
  (let ((local-tree '()))
    (define (lookup key tree)
      (cond ((empty? tree) #f)
            ((eq? (node-key tree) key) (node-value tree))
            ((> key (node-key tree)) (lookup key (node-right tree)))
            ((< key (node-key tree)) (lookup key (node-left tree)))
            (else (error "BS"))))
    (define (insert! key value tree)
      (cond ((empty? tree) (set! local-tree (make-node key value '() '()))) ;root node
            ((> key (node-key tree)) 
             (if (empty? (node-right tree))
                 (node-set! 'right tree (make-node key value '() '()))
                 (insert! key value (node-right tree))))
            ((< key (node-key tree))
             (if (empty? (node-left tree))
                 (node-set! 'left tree (make-node key value '() '()))
                 (insert! key value (node-left tree))))
            ((eq? key (node-key tree)) (node-set! 'value value))
            (else (error "BS"))))
    (define (dispatch m)
      (cond ((eq? m 'lookup) (lambda (key) (lookup key local-tree)))
            ((eq? m 'insert!) (lambda (key value) (insert! key value local-tree)))
            ((eq? m 'table) local-tree)
            (else (error "Unsupported operation -- BINARY-TABLE" m))))
    dispatch))

(define (memoize f)
  (let ((result-table (make-table)))
    (lambda (x)
      (let ((prev-result (lookup x result-table)))
        (or prev-result
            (let ((result (f x)))
              (insert! x result result-table)
              result))))))

(define memo-fib
  (memoize 
   (lambda (n)
     (cond ((= n 0) 0)
           ((= n 1) 1)
           (else (+ (memo-fib (- n 1)) 
                    (memo-fib (- n 2))))))))

;; Digital Circuit Simulator

;; Wires

(define (call-each procedures)
  (if (null? procedures)
      'done
      (begin
        ((mcar procedures))
        (call-each (mcdr procedures)))))

(define (make-wire)
  (let ((signal-value 0) (action-procedures '()))
    (define (set-my-signal! new-value)
      (if (not (= signal-value new-value))
          (begin (set! signal-value new-value)
                 (call-each action-procedures))
          'done))
    (define (accept-action-procedure! proc)
      (set! action-procedures (mcons proc action-procedures))
      (proc))
    (define (dispatch m)
      (cond ((eq? m 'get-signal) signal-value)
            ((eq? m 'set-signal!) set-my-signal!)
            ((eq? m 'add-action!) accept-action-procedure!)
            (else (error "Unknown operation -- WIRE" m))))
    dispatch))

(define (get-signal wire) 
  (wire 'get-signal))

(define (set-signal! wire new-value) 
  ((wire 'set-signal!) new-value))

(define (add-action! wire action-procedure) 
  ((wire 'add-action!) action-procedure))

(define (probe-wire name wire)
  (add-action! wire
               (lambda ()
                 (newline)
                 (display name)
                 (display " ")
                 (display (current-time the-agenda))
                 (display " New-value = ")
                 (display (get-signal wire)))))

;; Agenda and Delays

(define (propogate)
  (if (empty-agenda? the-agenda)
      'done
      (let ((first-item (first-agenda-item the-agenda)))
        (first-item)
        (remove-first-agenda-item! the-agenda)
        (propogate))))


(define inverter-delay 2)
(define and-gate-delay 3)
(define or-gate-delay 5)

(define (make-time-segment time queue)
  (mcons time queue))
(define (segment-time s) (mcar s))
(define (segment-queue s) (mcdr s))

(define (make-agenda) (mlist 0))
(define (current-time agenda) (mcar agenda))
(define (set-current-time! agenda time)
  (set-mcar! agenda time))
(define (segments agenda) (mcdr agenda))
(define (set-segments! agenda segments)
  (set-mcdr! agenda segments))
(define (first-segment agenda) (mcar (segments agenda)))
(define (rest-segments agenda) (mcdr (segments agenda)))
(define (empty-agenda? agenda)
  (empty? (segments agenda)))

(define (add-to-agenda! time action agenda)
  (define (belongs-before? segments)
    (or (empty? segments)
        (< time (segment-time (mcar segments)))))
  (define (make-new-time-segment time action)
    (let ((q (make-queue)))
      (insert-queue! q action)
      (make-time-segment time q)))
  (define (add-to-segments! segments)
    (if (= (segment-time (mcar segments)) time)
        (insert-queue! (segment-queue (mcar segments))
                       action)
        (let ((rest (mcdr segments)))
          (if (belongs-before? rest)
              (set-mcdr! segments
                        (mcons (make-new-time-segment time action)
                              (mcdr segments)))
              (add-to-segments! rest)))))
  (let ((segments (segments agenda)))
    (if (belongs-before? segments)
        (set-segments!
         agenda
         (mcons (make-new-time-segment time action)
               segments))
        (add-to-segments! segments))))
  
(define (remove-first-agenda-item! agenda)
  (let ((q (segment-queue (first-segment agenda))))
    (delete-queue! q)
    (when (empty-queue? q)
        (set-segments! agenda (rest-segments agenda)))))

(define (first-agenda-item agenda)
  (if (empty-agenda? agenda)
      (error "Agenda is empty -- FIRST-AGENDA-ITEM")
      (let ((first-seg (first-segment agenda)))
        (set-current-time! agenda (segment-time first-seg))
        (front-queue (segment-queue first-seg)))))
                           
(define the-agenda (make-agenda))
    
;; Gates
      
(define (after-delay delay action)
  (add-to-agenda! (+ delay (current-time the-agenda))
                  action
                  the-agenda))

(define (inverter input output)
  (define (invert-input)
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! input invert-input)
  'ok)

(define (and-gate a1 a2 output)
  (define (and-action-procedure)
    (let ((new-value
           (logical-and (get-signal a1) (get-signal a2))))
      (after-delay and-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure))

(define (or-gate o1 o2 output)
  (define (or-action-procedure)
    (let ((new-value
           (logical-or (get-signal o1) (get-signal o2))))
      (after-delay or-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! o1 or-action-procedure)
  (add-action! o2 or-action-procedure))

(define (composite-or-gate a b output)
  (let ((c (make-wire))
        (d (make-wire))
        (e (make-wire)))
    (inverter a c)
    (inverter b d)
    (and-gate c d e)
    (inverter e output)))

(define (logical-not s)
  (cond ((= s 0) 1)
        ((= s 1) 0)
        (else (error "Invalid signal" s))))

(define (logical-and a b)
  (if (and (= a 1)
           (= b 1))
      1
      0))

(define (logical-or a b)
  (if (or (= a 1)
          (= b 1))
      1
      0))

(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))

(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))

(define (ripple-carry-adder ak bk sk c)
  (define (iter c-in a-wires b-wires s-wires)
    (if (empty? a-wires)
        c-in ;This is the c-out wire of the last adder
        (let* ((c-out (make-wire))
              (new-adder (full-adder (car a-wires)
                                     (car b-wires)
                                     c-in
                                     (car s-wires)
                                     c-out)))
          (iter c-out (cdr a-wires) (cdr b-wires) (cdr s-wires)))))
  (iter c ak bk sk))              


(define input-1 (make-wire))
(define input-2 (make-wire))
(define result (make-wire))
(and-gate input-1 input-2 result)

;; Constraint Propogation
#|
(define (probe name connector)
  (define (print-probe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value))
    (define (process-new-value)
      (print-probe (get-value connector)))
    (define (process-forget-value )
      (print-probe "?"))
    (define (me request)
      (cond ((eq? request 'I-have-a-value) (process-new-value))
            ((eq? request 'I-lost-my-value) (process-forget-value))
            (else (error "Unknown request -- PROBE" request))))
    (connect connector me)
    me)

(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
           (set-value! sum 
                       (+ (get-value a1) (get-value a2))
                       me))
          ((and (has-value? a1) (has-value? sum))
           (set-value! a2 
                       (- (get-value sum) (get-value a1))
                       me))
          ((and (has-value? a2) (has-value? sum))
           (set-value! a1
                       (- (get-value sum) (get-value a1))
                       me))))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else 
           (error "Unknown request -- ADDER" request))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)

(define (inform-about-value constraint)
  (constraint 'I-have-a-value))
(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))

(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0))
               (and (has-value? m2) (= (get-value m2) 0)))
           (set-value! product 0 me))
          ((and (has-value? m1) (has-value? m2))
           (set-value! product
                       (* (get-value m1) (get-value m2))
                       me))
          ((and (has-value? product) (has-value? m1))
           (set-value! m2
                       (/ (get-value product (get-value m1)))
                       me))
          ((and (has-value? product) (has-value? m2))
           (set-value! m1
                       (/ (get-value product)
                          (get-value m2))
                       me))))
  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else (error "Unknown request -- MULTIPLIER" request))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)

(define (constant value connector)
  (define (me request)
    (error "Unknown request -- CONSTANT" request))
  (connect connector me)
  (set-value! connector value me)
  me)
                       

(define (make-connector)
  (let ((value false) (informant false) (constraints '()))
    (define (set-my-value newval setter)
      (cond ((not (has-value? me))
             (set! value newval)
             (set! informant setter)
             (for-each-except setter
                              inform-about-value
                              constraints))
            ((not (= value newval)
                  (error "Contradiction" (list value newval))))
            (else 'ignored)))
    (define (forget-my-value retractor)
      (if (eq? retractor informant)
          (begin (set! informant false)
                 (for-each-except retractor
                                  inform-about-no-value
                                  constraints))
          'ignored))
    (define (connect new-constraint)
      (when (not (memq new-constraint constraints))
          (set! constraints
                (cons new-constraint constraints)))
      (when (has-value? me)
        (inform-about-value new-constraint))
      'done)
    (define (me request)
      (cond ((eq? request 'has-value?)
             (if informant true false))
            ((eq? request 'value) value)
            ((eq? request 'set-value!) set-my-value)
            ((eq? request 'forget) forget-my-value)
            ((eq? request 'connect) connect)
            (else (error "Unknown operation -- CONNECTOR" request))))
    me))

(define (for-each-except exception procedure list)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? (car items) exception) (loop (cdr items)))
          (else (procedure (car items))
                (loop (cdr items)))))
  (loop list))

(define (has-value? connector)
  (connector 'has-value?))
(define (get-value connector)
  (connector 'value))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector retractor)
  ((connector 'forget) retractor))
(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))

(define (averager a b avg)
  (let ((s (make-connector))
        (c (make-connector)))
    (adder a b s)
    (constant (/ 1 2) c)
    (multiplier s c avg)))

(define (squarer a b)
  (define (process-new-value)
    (if (has-value? b)
        (if (< (get-value b) 0)
            (error "square less than 0 -- SQUARER" (get-value b))
            (set-value! a 
                        (sqrt (get-value b)) 
                        me))
        (set-value! b 
                    (* (get-value a) (get-value a))
                    me)))
  (define (process-forget-value) 
    (forget-value! a me)
    (forget-value! b me)
    (process-new-value))
  (define (me request) 
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          (else (error "Unknown Operation -- SQUARER"))))
  (connect a me)
  (connect b me)
  me)

(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))
(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))
(define (c/ x y)
  (let ((z (ma inform-about-connector)))
    (multiplier z x y)
    z))
(define (cv value)
  (let ((z (make-connector)))
    (constant value z)
    z))
(define (c- x y)
  (let ((z (make-connector)))
    (adder y z x)
    z))

(define a (make-connector))
(define b (make-connector))
(define out (make-connector))
(probe 'input-a a)
(probe 'input-b b)
(probe 'output out)

|#

(define (for-each-except exception procedure list)
  (define (loop items)
    (cond ((empty? items) 'done)
          ((eq? (car items) exception) (loop (cdr items)))
          (else (procedure (car items))
                (loop (cdr items)))))
  (loop list))

(define (inform-about-value constraint) (constraint 'I-have-a-value))
(define (inform-about-no-value constraint) (constraint 'I-lost-my-value))
(define (has-value? connector) (connector 'has-value?))
(define (set-value! connector value informant) ((connector 'set-value!) value informant))
(define (get-value connector) (connector 'get-value))
(define (forget-value! connector informant) ((connector 'forget-value!) informant))
(define (connect connector constraint) ((connector 'connect) constraint))

(define (make-connector)
  (let ((value '()) (informant '()) (constraints '()))
  (define (set-value! new-value setter)
    (if (not (eq? new-value value))
        (begin (set! value new-value)
               (set! informant setter)
               (for-each-except setter
                                inform-about-value
                                constraints))
        'ignored))
    (define (forget-value! setter)
      (if (eq? setter informant)
          (begin (set! value '())
                 (set! informant '())
                 (for-each-except setter
                                  inform-about-no-value
                                  constraints))
          'ignored))
    (define (connect constraint)
      (when (not (memq constraint constraints))
          (set! constraints (cons constraint constraints))
          'ignored)
      (when (has-value? me)
        (inform-about-value constraint)))
    (define (me request)
      (cond ((eq? request 'get-value) value)
            ((eq? request 'has-value?) 
             (if (empty? value)
                 #f
                 #t))
            ((eq? request 'set-value!) set-value!)
            ((eq? request 'forget-value!) forget-value!)
            ((eq? request 'connect) connect)
            (else (error "Unsupported operation - CONNECTOR"))))
    me))

(define (adder a b out)
  (define (process-new-value)
    (cond ((and (has-value? a) (has-value? b))
           (set-value! out 
                       (+ (get-value a)
                              (get-value b))
                       me))
          ((and (has-value? a) (has-value? out))
           (set-value! b 
                       (- (get-value out)
                            (get-value a))
                       me))
          ((and (has-value? b) (has-value? out))
           (set-value! a 
                       (- (get-value out)
                            (get-value a))
                       me))
          (else 'ignored)))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (forget-value! out me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else (error "Unknown request"))))
  (connect a me)
  (connect b me)
  (connect out me)
  me)
  
    
(define a (make-connector))
(define b (make-connector))
(define out (make-connector))
(adder a b out)
(set-value! a 5 'user)
(set-value! b 3 'user)

(forget-value! a 'user)

;; Mutex - 3.4

(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val))
      serialized-p)))

(define (make-mutex)
  (let ((cell (mcons #f '())))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (when (test-and-set! cell)
                 (the-mutex 'acquire)))
            ((eq? m 'release) (clear! cell))))
    the-mutex))

(define (clear! cell)
  (set-mcar! cell false))

(define (test-and-set! cell)
  (if (mcar cell)
      #t
      (begin (set-mcar! cell #t)
             #f)))

;; Define a semaphore that returns #t if busy, else #f
(define (make-semaphore n)
  (let ((locks-left n)          ;0 means no more locks left to be acquired
        (mutex (make-mutex)))
    (define (acquire)
      (if (= locks-left 0)
          (print "No locks left -- try acquiring again")
          (begin (mutex 'acquire)
                 (set! locks-left (- locks-left 1))
                 (mutex 'release)
                 #f)))
    (define (release)
      (if (= locks-left n)
          'done
          (begin (mutex 'acquire)
                 (set! locks-left (+ locks-left 1))
                 (mutex 'release)
                 'done)))
    (define (me message)
      (cond ((eq? message 'acquire) (acquire))
            ((eq? message 'release) (release))
            (else (error "Not supported operation -- SEMAPHORE" message))))
    me))
    
    
(define (serialized-exchange account1 account2)
  (let ((serializer1 (account1 'serializer))
        (serializer2 (account2 'serializer)))
    ((serializer1 (serializer2 exchange))
     account1
     account2)))

(define make-account-and-serializer
  (let ((next-account-id 0))
    (lambda (balance)
      (begin (define account-id next-account-id)
             (set! next-account-id (+ next-account-id 1)))
      (define (withdraw amount)
        (if (>= balance amount)
            (begin (set! balance (- balance amount))
                   balance)
            "Insufficient funds"))
      (define (deposit amount)
        (set! balance (+ balance amount))
        balance)
      (let ((balance-serializer (make-serializer)))
        (define (dispatch m)
          (cond ((eq? m 'withdraw) withdraw)
                ((eq? m 'deposit) deposit)
                ((eq? m 'balance) balance)
                ((eq? m 'serializer) balance-serializer)
                ((eq? m 'id) account-id)
                (else (error "Unknown request -- MAKE-ACCOUNT"
                             m))))
        dispatch))))

(define (exchange account1 account2)
  (let ((difference (- (account1 'balance)
                       (account2 'balance))))
    (if (< (account1 'id)
           (account2 'id))
        (begin 
          ((account1 'withdraw) difference)
          ((account2 'deposit) difference))
        (begin
          ((account2 'deposit) difference)
          ((account1 'withdraw) difference)))))